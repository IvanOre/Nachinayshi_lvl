package Recursion;

/**
 * Рекурсия вызов метода в теле этого же метода
 * Если вызовем этот метод в теле метода то будет рекурсия и ошибка StackOverFlow
 * Зайдя в этот метод мы никогда его не исполним. Будет крутиться бесконечно
 * Инфа о вызове метода хранится в участке памяти-СТЕК
 * Что бы рекурсия была полезной нам нужен BaseCase или условие выхода
 * В методе n вызвался counter с аргументом 3, 3!=0 поэтому идем дальше,выводим 3 на экран,вызов метода counter -1,
 * отнимаем от 3 -1 и опять по новой. и так до условия выхода,когда наш counter n будет равен 0
 * Один вызов ждет другой в стеке. Когда последний вызов исполняется мы начинаем подниматься по цепочке вызовов.
 *
 *
 * Факториал это 4! = 4 * 3 * 2 * 1
 *
 */
public class Test {
    public static void main(String[] args) {
        //counter(3);//хотим 3
        System.out.println(fac(4));//факториал от 4
    }
       /* private static void counter(int n){

            if (n==0)//условие выхода из метода
                return;
            System.out.println(n);//вызовет 3

            counter(n - 1);//вызываем наш метод с 3 и минус 1.ног тоже будет бесконечно тк нет условия выхода


        }*/

    //////////////////////////////////ПРИМЕР С ФАКТОРИАЛОМ///////////////////////////////////
    private static int fac(int n){

        if (n == 1)
            return 1;

        return n * fac(n -1);//рекурсивный вызов

    }


}
