package Nasledovanie_extends;

/**
 * Animal animal = new Animal(); не знаем конкретно какое это животное.
 * Создали 2 метода в классе Анимал. Теперь тут можем вызвать эти методы
 * Наше животное теперь умеет есть и спать.
 * Наследовали класс Dog от класса Animal и теперь в методе мейн можем на созданнм классе дог вызывать методы
 * из класса анимал
 *  Dog dog = new Dog();
 *         dog.sleep();
 *         dog.eat();
 *  Хотя в классе Dog не написали ни одного метода,но собака теперь наследует все методы класса Animal и может
 *  их тут использовать.
 *
 *  Мы создали метод в классе Dog уникальный для него,bark() лаять, и теперь можем тут его тоже использовать.
 *  Мы можем на новом объекте Dog использовать методы класса родителя Animal ,унаследованные в классе Dog
 *  через extends . А так же использовать уникальные методы класса Dog,присущие только ему,например созданный в
 *  классе Dog метода bark() лаять.
 *
 *  Мы переопределили метод eat() родительский в классе Dog на свой и теперь вывод этого метода идет из класса
 *  потомка уже переопределенный
 *
 *  Наследование используем если есть какой-то общий класс и мы какие-то методы хотим получить от этого класса
 *  и хотим внести какие-то методы конкретные подходящие к нашему классу
 *  Удобство, что не нужно будет в каждом наследнике прописывать методы родителя.
 *  Он наследуется автоматом через extends
 *
 */
public class Nasledovanie_Main {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.sleep();// стандартный метод из класса Animal
        dog.eat();//переопределенный родительский метод, в классе Dog
        dog.bark();// метод из класса Dog
        dog.showName();// поле унаследованное от родителя Animal классом Dog

    }
}
